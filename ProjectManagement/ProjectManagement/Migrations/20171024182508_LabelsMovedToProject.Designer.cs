// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using ProjectManagement;
using ProjectManagement.Contracts.Issue.Enums;
using ProjectManagement.Contracts.Sprint.Enums;
using System;

namespace ProjectManagement.Migrations
{
    [DbContext(typeof(ProjectManagementContext))]
    [Migration("20171024182508_LabelsMovedToProject")]
    partial class LabelsMovedToProject
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("project-management")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("Infrastructure.Message.EventEnvelope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("Delivered");

                    b.Property<string>("DomainEvent")
                        .IsRequired();

                    b.Property<string>("DomainEventType")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("EventEnvelope");
                });

            modelBuilder.Entity("ProjectManagement.Comment.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BugId");

                    b.Property<string>("Content");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<Guid>("MemberId");

                    b.Property<Guid?>("NfrId");

                    b.Property<Guid?>("SubtaskId");

                    b.Property<Guid?>("TaskId");

                    b.HasKey("Id");

                    b.HasIndex("BugId");

                    b.HasIndex("NfrId");

                    b.HasIndex("SubtaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ProjectManagement.Issue.Model.Abstract.IssueLabel", b =>
                {
                    b.Property<Guid>("IssueId");

                    b.Property<Guid>("LabelId");

                    b.HasKey("IssueId", "LabelId");

                    b.ToTable("IssuesLabels");
                });

            modelBuilder.Entity("ProjectManagement.Issue.Model.Bug", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid?>("AssigneeId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<Guid?>("NfrId");

                    b.Property<Guid>("ProjectId");

                    b.Property<Guid>("ReporterId");

                    b.Property<Guid?>("SprintId");

                    b.Property<int>("Status");

                    b.Property<Guid?>("TaskId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("NfrId");

                    b.HasIndex("TaskId");

                    b.ToTable("Bug");
                });

            modelBuilder.Entity("ProjectManagement.Issue.Model.Nfr", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid?>("AssigneeId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<Guid>("ProjectId");

                    b.Property<Guid>("ReporterId");

                    b.Property<Guid?>("SprintId");

                    b.Property<int>("Status");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.ToTable("Nfr");
                });

            modelBuilder.Entity("ProjectManagement.Issue.Model.Subtask", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid?>("AssigneeId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<Guid>("ProjectId");

                    b.Property<Guid>("ReporterId");

                    b.Property<Guid?>("SprintId");

                    b.Property<int>("Status");

                    b.Property<Guid?>("TaskId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("Subtask");
                });

            modelBuilder.Entity("ProjectManagement.Issue.Model.Task", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid?>("AssigneeId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<Guid>("ProjectId");

                    b.Property<Guid>("ReporterId");

                    b.Property<Guid?>("SprintId");

                    b.Property<int>("Status");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("ProjectManagement.Label.Label", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid>("ProjectId");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.HasIndex("ProjectId");

                    b.ToTable("Label");
                });

            modelBuilder.Entity("ProjectManagement.Project.Model.Project", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<long>("Version");

                    b.Property<string>("members");

                    b.HasKey("Id");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("ProjectManagement.Sprint.Model.Sprint", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid>("ProjectId");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("Status");

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.ToTable("Sprint");
                });

            modelBuilder.Entity("ProjectManagement.User.Model.User", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<long>("AggregateVersion");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Role")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ProjectManagement.Comment.Comment", b =>
                {
                    b.HasOne("ProjectManagement.Issue.Model.Bug")
                        .WithMany("Comments")
                        .HasForeignKey("BugId");

                    b.HasOne("ProjectManagement.Issue.Model.Nfr")
                        .WithMany("Comments")
                        .HasForeignKey("NfrId");

                    b.HasOne("ProjectManagement.Issue.Model.Subtask")
                        .WithMany("Comments")
                        .HasForeignKey("SubtaskId");

                    b.HasOne("ProjectManagement.Issue.Model.Task")
                        .WithMany("Comments")
                        .HasForeignKey("TaskId");
                });

            modelBuilder.Entity("ProjectManagement.Issue.Model.Bug", b =>
                {
                    b.HasOne("ProjectManagement.Issue.Model.Nfr")
                        .WithMany("Bugs")
                        .HasForeignKey("NfrId");

                    b.HasOne("ProjectManagement.Issue.Model.Task")
                        .WithMany("Bugs")
                        .HasForeignKey("TaskId");
                });

            modelBuilder.Entity("ProjectManagement.Issue.Model.Subtask", b =>
                {
                    b.HasOne("ProjectManagement.Issue.Model.Task")
                        .WithMany("Subtasks")
                        .HasForeignKey("TaskId");
                });

            modelBuilder.Entity("ProjectManagement.Label.Label", b =>
                {
                    b.HasOne("ProjectManagement.Project.Model.Project")
                        .WithMany("Labels")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
